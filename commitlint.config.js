const commitTypes = require("./commitTypes");

module.exports = {
  extends: ["gitmoji"],
  rules: {
    "header-max-length": [2, "always", 150],
    "type-enum": [2, "always", commitTypes.map((type) => type.value)],
  },
  prompt: {
    alias: { fd: "docs: fix typos" },
    messages: {
      type: "Select the type of change that you're committing:",
      scope: "Denote the SCOPE of this change (optional):",
      customScope: "Denote the SCOPE of this change:",
      subject: "Write a SHORT, IMPERATIVE tense description of the change:\n",
      body: 'Provide a LONGER description of the change (optional). Use "|" to break new line:\n',
      breaking:
        'List any BREAKING CHANGES (optional). Use "|" to break new line:\n',
      // footerPrefixsSelect: "Select the ISSUES type of changeList by this change (optional):",
      // customFooterPrefixs: "Input ISSUES prefix:",
      footer: "List any ISSUES by this change. E.g.: #31, #34:\n",
      confirmCommit: "Are you sure you want to proceed with the commit above?",
    },
    types: commitTypes.map((type) => ({
      value: type.value,
      name: type.name,
      emoji: type.emoji,
    })),
    useEmoji: true,
    emojiAlign: "left",
    themeColorCode: "",
    scopes: [
      { name: "ui" },
      { name: "ci" },
      { name: "tests" },
      { name: "core" },
      { name: "tooling" },
      { name: "style" },
    ],
    allowCustomScopes: true,
    allowEmptyScopes: false,
    customScopesAlign: "bottom",
    customScopesAlias: "custom",
    emptyScopesAlias: "empty",
    upperCaseSubject: false,
    markBreakingChangeMode: false,
    allowBreakingChanges: ["feat", "fix", "hotfix", "module"],
    breaklineNumber: 100,
    breaklineChar: "|",
    skipQuestions: [],
    // issuePrefixs: [{ value: "closed", name: "closed:   ISSUES has been processed" }],
    // customIssuePrefixsAlign: "top",
    // emptyIssuePrefixsAlias: "skip",
    // customIssuePrefixsAlias: "custom",
    allowCustomIssuePrefixs: false,
    allowEmptyIssuePrefixs: false,
    confirmColorize: true,
    maxHeaderLength: 150,
    maxSubjectLength: Infinity,
    minSubjectLength: 0,
    scopeOverrides: undefined,
    defaultBody: "",
    defaultIssues: "",
    defaultScope: "",
    defaultSubject: "",
  },
};
